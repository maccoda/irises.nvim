-- Neovim color scheme - Irises
-- Based on Van Gogh's painting "Irises"

local Irises = {}

local colors = require("irises.colors")

local groups = {
  -- Core
  Comment = { fg = colors.comment, italic = true },
  Conditional = { link = "Statement" },
  Cursor = { fg = colors.cursor },
  CursorLine = { bg = colors.bg1 },
  CursorLineNr = { bg = colors.bg1, fg = colors.cursor },
  EndOfBuffer = { fg = colors.bg0 },
  Folded = { bg = colors.bg0, italic = true },
  Include = { fg = colors.rust_orange, bold = true },
  LineNr = { fg = colors.fg2 },
  Normal = { fg = colors.fg0, bg = colors.bg0 },
  NormalFloat = { fg = colors.fg2, bg = colors.bg2 },
  -- FloatBorder = { fg = colors.fg1, bg = colors.bg3 },
  -- FloatTitle = { fg = c.border_highlight, bg = c.bg_float },
  NormalNC = { fg = colors.fg0, bg = colors.bg0 },
  Pmenu = { bg = colors.bg1, fg = colors.fg1 },
  PmenuMatch = { bg = colors.bg1, fg = colors.fresh_green },
  PmenuSbar = { bg = colors.bg2 },
  PmenuSel = { bg = colors.selection, bold = true },
  PmenuKind = { bg = colors.bg1, fg = colors.fg1 },
  PmenuThumb = { bg = colors.dust_olive },
  Substitute = { bg = colors.violet, fg = colors.fg0 },
  Search = { bg = colors.selection, fg = colors.fg0 },
  StatusLine = { bg = colors.bg2 },
  StatusLineNC = { bg = colors.bg3 },
  Visual = { bg = colors.selection },
  VisualNOS = { link = "Visual" },
  WinBar = { link = "StatusLine" },
  WinBarNC = { link = "StatusLineNC" },
  WinSeparator = { bg = colors.bg0, fg = colors.fg1 },
  -- ColorColumn = { bg = c.black },
  -- Conceal = { fg = c.dark5 },
  -- lCursor = { fg = c.bg, bg = c.fg },
  -- CursorIM = { fg = c.bg, bg = c.fg },
  -- CursorColumn = { bg = c.bg_highlight },
  Directory = { fg = colors.iris_blue },
  DiffAdd = { bg = colors.diff.add, fg = colors.fg1 },
  DiffDelete = { bg = colors.diff.delete, fg = colors.bg3 },
  -- DiffText = { bg = c.diff.text },
  ErrorMsg = { fg = colors.carmine_red },
  -- VertSplit = { fg = c.border },
  -- FoldColumn = { bg = opts.transparent and c.none or c.bg, fg = c.comment },
  -- SignColumn = { bg = opts.transparent and c.none or c.bg, fg = c.fg_gutter },
  -- SignColumnSB = { bg = c.bg_sidebar, fg = c.fg_gutter },
  -- LineNrAbove = { fg = c.fg_gutter },
  -- LineNrBelow = { fg = c.fg_gutter },
  MatchParen = { fg = colors.fg0, bg = colors.selection },
  -- ModeMsg = { fg = c.fg_dark, bold = true },
  -- MsgArea = { fg = c.fg_dark },
  -- MoreMsg = { fg = c.blue },
  NonText = { fg = colors.bg1 },
  -- NormalSB = { fg = c.fg_sidebar, bg = c.bg_sidebar },
  -- PmenuMatchSel = { bg = Util.blend_bg(c.fg_gutter, 0.8), fg = c.blue1 },
  -- Question = { fg = c.blue }, -- |hit-enter| prompt and yes/no questions
  QuickFixLine = { bg = colors.selection, bold = true },
  IncSearch = { bg = colors.rust_orange, fg = colors.fg0 },
  CurSearch = { link = "IncSearch" },
  -- SpecialKey = { fg = c.dark3 },
  SpellBad = { sp = colors.carmine_red, undercurl = true },
  SpellCap = { sp = colors.ochre_yellow, undercurl = true },
  SpellLocal = { sp = colors.dust_olive, undercurl = true },
  SpellRare = { sp = colors.iris_blue, undercurl = true },
  TabLine = { bg = colors.bg2, fg = colors.fg2 },
  TabLineFill = { bg = colors.bg1 },
  TabLineSel = { fg = colors.bg0, bg = colors.selection },
  -- Title = { fg = c.blue, bold = true },
  WarningMsg = { fg = colors.ochre_yellow },
  Whitespace = { fg = colors.fg2 },
  -- WildMenu = { bg = c.bg_visual },

  Bold = { bold = true, fg = colors.fg0 },
  Character = { fg = colors.fresh_green },
  Constant = { fg = colors.sky_accent },
  -- Debug = { fg = c.orange },
  Delimiter = { link = "Special" },
  Error = { fg = colors.carmine_red },
  Function = { fg = colors.iris_blue, bold = true },
  Identifier = { fg = colors.deep_purple },
  Italic = { italic = true, fg = colors.fg0 },
  Keyword = { fg = colors.rust_orange },
  Operator = { fg = colors.sky_accent },
  PreProc = { fg = colors.rust_orange, bold = true },
  Special = { fg = colors.sky_accent },
  Statement = { fg = colors.rust_orange },
  String = { fg = colors.fresh_green },
  -- Todo = { bg = c.yellow, fg = c.bg },
  Type = { fg = colors.iris_blue },
  Underlined = { underline = true },
  -- debugBreakpoint = { bg = Util.blend_bg(c.info, 0.1), fg = c.info },
  -- debugPC = { bg = c.bg_sidebar },
  dosIniLabel = { link = "@property" },
  -- helpCommand = { bg = c.terminal_black, fg = c.blue },
  -- htmlH1 = { fg = c.magenta, bold = true },
  -- htmlH2 = { fg = c.blue, bold = true },
  qfFileName = { fg = colors.iris_blue },
  qfLineNr = { fg = colors.comment },

  -- Native LSP

  LspReferenceRead = { bg = colors.bg2 },
  LspReferenceTarget = { link = "Visual" },
  LspReferenceText = { link = "LspReferenceRead" },
  LspReferenceWrite = { link = "LspReferenceRead" },
  LspSignatureActiveParameter = { bg = colors.bg3, bold = true },
  LspCodeLens = { fg = colors.comment },
  LspInlayHint = { bg = colors.bg1, fg = colors.fg2 },
  -- LspInfoBorder = { fg = c.border_highlight, bg = c.bg_float },

  DiagnosticError = { fg = colors.carmine_red },
  DiagnosticSignError = { fg = colors.carmine_red },
  DiagnosticUnderlineError = { undercurl = true, sp = colors.carmine_red },
  DiagnosticWarn = { fg = colors.ochre_yellow },
  DiagnosticSignWarn = { fg = colors.ochre_yellow },
  DiagnosticUnderlineWarn = { undercurl = true, sp = colors.ochre_yellow },
  DiagnosticInfo = { fg = colors.iris_blue },
  DiagnosticSignInfo = { fg = colors.iris_blue },
  DiagnosticUnderlineInfo = { sp = colors.iris_blue, undercurl = true },
  DiagnosticHint = { fg = colors.dust_olive },
  DiagnosticSignHint = { fg = colors.dust_olive },
  DiagnosticUnderlineHint = { sp = colors.dust_olive, undercurl = true },
  DiagnosticFloatingError = { link = "DiagnosticError" },
  DiagnosticFloatingWarn = { link = "DiagnosticWarn" },
  DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
  DiagnosticFloatingHint = { link = "DiagnosticHint" },
  DiagnosticVirtualTextError = { link = "DiagnosticError" },
  DiagnosticVirtualTextWarn = { link = "DiagnosticWarn" },
  DiagnosticVirtualTextInfo = { link = "DiagnosticInfo" },
  DiagnosticVirtualTextHint = { link = "DiagnosticHint" },

  -- Health
  healthError = { fg = colors.carmine_red },
  healthSuccess = { fg = colors.fresh_green },
  healthWarning = { fg = colors.ochre_yellow },

  -- WhichKey
  WhichKeyTitle = { link = "NormalFloat" },

  -- Treesitter

  ["@comment"] = { link = "Comment" },
  ["@none"] = { bg = "NONE", fg = "NONE" },
  ["@preproc"] = { link = "PreProc" },
  ["@define"] = { link = "Define" },
  ["@operator"] = { link = "Operator" },
  ["@punctuation.delimiter"] = { link = "Delimiter" },
  ["@punctuation.bracket"] = { fg = colors.fg2 },
  ["@punctuation.special"] = { link = "Delimiter" },
  ["@string"] = { link = "String" },
  ["@string.regex"] = { link = "String" },
  ["@string.regexp"] = { link = "String" },
  ["@string.escape"] = { link = "SpecialChar" },
  ["@string.special"] = { link = "SpecialChar" },
  ["@string.special.path"] = { link = "Underlined" },
  ["@string.special.symbol"] = { link = "Identifier" },
  ["@string.special.url"] = { link = "Underlined" },
  ["@character"] = { link = "Character" },
  ["@character.special"] = { link = "SpecialChar" },
  ["@boolean"] = { link = "Boolean" },
  ["@number"] = { link = "Number" },
  ["@number.float"] = { link = "Float" },
  ["@float"] = { link = "Float" },
  ["@function"] = { link = "Function" },
  ["@function.builtin"] = { link = "Special" },
  ["@function.call"] = { link = "Function" },
  ["@function.macro"] = { link = "Macro" },
  ["@function.method"] = { link = "Function" },
  ["@method"] = { link = "Function" },
  ["@method.call"] = { link = "Function" },
  ["@constructor"] = { link = "Special" },
  ["@parameter"] = { link = "Identifier" },
  ["@keyword"] = { link = "Keyword" },
  ["@keyword.conditional"] = { link = "Conditional" },
  ["@keyword.debug"] = { link = "Debug" },
  ["@keyword.directive"] = { link = "PreProc" },
  ["@keyword.directive.define"] = { link = "Define" },
  ["@keyword.exception"] = { link = "Exception" },
  ["@keyword.function"] = { link = "Keyword" },
  ["@keyword.import"] = { link = "Include" },
  ["@keyword.operator"] = { link = "Operator" },
  ["@keyword.repeat"] = { link = "Repeat" },
  ["@keyword.return"] = { link = "Statement" },
  ["@keyword.storage"] = { link = "StorageClass" },
  ["@keyword.coroutine"] = { link = "Keyword" },
  ["@conditional"] = { link = "Conditional" },
  ["@repeat"] = { link = "Repeat" },
  ["@debug"] = { link = "Debug" },
  ["@label"] = { link = "Label" },
  ["@include"] = { link = "Include" },
  ["@exception"] = { link = "Exception" },
  ["@type"] = { link = "Type" },
  ["@type.builtin"] = { link = "Type" },
  ["@type.definition"] = { link = "Typedef" },
  ["@type.qualifier"] = { link = "Type" },
  ["@storageclass"] = { link = "StorageClass" },
  ["@attribute"] = { link = "PreProc" },
  ["@field"] = { link = "Identifier" },
  ["@property"] = { link = "Identifier" },
  ["@variable"] = { fg = colors.fg0 },
  ["@variable.builtin"] = { link = "Special" },
  ["@variable.member"] = { link = "Identifier" },
  ["@variable.parameter"] = { link = "Identifier" },
  ["@constant"] = { link = "Constant" },
  ["@constant.builtin"] = { link = "Special" },
  ["@constant.macro"] = { link = "Define" },
  ["@markup"] = { fg = colors.fg1 },
  ["@markup.strong"] = { bold = true }, -- maybe configurable
  ["@markup.italic"] = { link = "@text.emphasis" },
  ["@markup.underline"] = { underline = true }, -- maybe configurable
  ["@markup.strikethrough"] = { strikethrough = true }, -- maybe configurable
  ["@markup.heading"] = { link = "Title" },
  ["@markup.raw"] = { link = "String" },
  ["@markup.math"] = { link = "Special" },
  ["@markup.environment"] = { link = "Macro" },
  ["@markup.environment.name"] = { link = "Type" },
  ["@markup.link"] = { link = "Underlined" },
  ["@markup.link.label"] = { link = "SpecialChar" },
  ["@markup.list"] = { link = "Delimiter" },
  ["@markup.list.checked"] = { fg = colors.fresh_green },
  ["@markup.list.unchecked"] = { fg = colors.dust_olive },
  ["@comment.todo"] = { link = "Todo" },
  ["@comment.note"] = { link = "SpecialComment" },
  ["@comment.warning"] = { link = "WarningMsg" },
  ["@comment.error"] = { link = "ErrorMsg" },
  ["@diff.plus"] = { link = "diffAdded" },
  ["@diff.minus"] = { link = "diffRemoved" },
  ["@diff.delta"] = { link = "diffChanged" },
  ["@module"] = { fg = colors.fg0 },
  ["@namespace"] = { fg = colors.fg0 },
  ["@symbol"] = { link = "Identifier" },
  ["@text"] = { fg = colors.fg0 },
  ["@text.strong"] = { bold = true }, -- maybe configurable
  ["@text.emphasis"] = { italic = true }, -- maybe configurable
  ["@text.underline"] = { underline = true }, -- maybe configurable
  ["@text.strike"] = { strikethrough = true }, -- maybe configurable
  ["@text.title"] = { link = "Title" },
  ["@text.literal"] = { link = "String" },
  ["@text.uri"] = { link = "Underlined" },
  ["@text.math"] = { link = "Special" },
  ["@text.environment"] = { link = "Macro" },
  ["@text.environment.name"] = { link = "Type" },
  ["@text.reference"] = { link = "Constant" },
  ["@text.todo"] = { link = "Todo" },
  ["@text.todo.checked"] = { link = "@markup.list.checked" },
  ["@text.todo.unchecked"] = { link = "@markup.list.unchecked" },
  ["@text.note"] = { link = "SpecialComment" },
  ["@text.note.comment"] = { fg = colors.purple, bold = true },
  ["@text.warning"] = { link = "WarningMsg" },
  ["@text.danger"] = { link = "ErrorMsg" },
  ["@text.danger.comment"] = { fg = colors.fg0, bg = colors.red, bold = true },
  ["@text.diff.add"] = { link = "diffAdded" },
  ["@text.diff.delete"] = { link = "diffRemoved" },
  ["@tag"] = { link = "Tag" },
  ["@tag.attribute"] = { link = "Identifier" },
  ["@tag.delimiter"] = { link = "Delimiter" },
  ["@punctuation"] = { link = "Delimiter" },
  ["@macro"] = { link = "Macro" },
  ["@structure"] = { link = "Structure" },
  ["@lsp.type.class"] = { link = "@type" },
  ["@lsp.type.comment"] = { link = "@comment" },
  ["@lsp.type.decorator"] = { link = "@macro" },
  ["@lsp.type.enum"] = { link = "@type" },
  ["@lsp.type.enumMember"] = { link = "@constant" },
  ["@lsp.type.function"] = { link = "@function" },
  ["@lsp.type.macro"] = { link = "@macro" },
  ["@lsp.type.method"] = { link = "@method" },
  ["@lsp.type.modifier.java"] = { link = "@keyword.type.java" },
  ["@lsp.type.namespace"] = { link = "@namespace" },
  ["@lsp.type.parameter"] = { link = "@parameter" },
  ["@lsp.type.property"] = { link = "@property" },
  ["@lsp.type.struct"] = { link = "@type" },
  ["@lsp.type.type"] = { link = "@type" },
  ["@lsp.type.typeParameter"] = { link = "@type.definition" },
  ["@lsp.type.variable"] = { link = "@variable" },

  -- Kinds were copied from tokyonight for the linking idea
  BlinkCmpKindArray = { link = "@punctuation.bracket" },
  BlinkCmpKindBoolean = { link = "@boolean" },
  BlinkCmpKindCodeium = { fg = colors.sky_accent, bg = colors.none },
  BlinkCmpKindClass = { link = "@type" },
  BlinkCmpKindColor = { link = "Special" },
  BlinkCmpKindConstant = { link = "@constant" },
  BlinkCmpKindConstructor = { link = "@constructor" },
  BlinkCmpKindEnum = { link = "@lsp.type.enum" },
  BlinkCmpKindEnumMember = { link = "@lsp.type.enumMember" },
  BlinkCmpKindEvent = { link = "Special" },
  BlinkCmpKindField = { link = "@variable.member" },
  BlinkCmpKindFile = { link = "Normal" },
  BlinkCmpKindFolder = { link = "Directory" },
  BlinkCmpKindFunction = { link = "@function" },
  BlinkCmpKindInterface = { link = "@lsp.type.interface" },
  BlinkCmpKindKey = { link = "@variable.member" },
  BlinkCmpKindKeyword = { link = "@lsp.type.keyword" },
  BlinkCmpKindMethod = { link = "@function.method" },
  BlinkCmpKindModule = { link = "@module" },
  BlinkCmpKindNamespace = { link = "@module" },
  BlinkCmpKindNull = { link = "@constant.builtin" },
  BlinkCmpKindNumber = { link = "@number" },
  BlinkCmpKindObject = { link = "@constant" },
  BlinkCmpKindOperator = { link = "@operator" },
  BlinkCmpKindPackage = { link = "@module" },
  BlinkCmpKindProperty = { link = "@property" },
  BlinkCmpKindReference = { link = "@markup.link" },
  BlinkCmpKindSnippet = { link = "Conceal" },
  BlinkCmpKindString = { link = "@string" },
  BlinkCmpKindStruct = { link = "@lsp.type.struct" },
  BlinkCmpKindUnit = { link = "@lsp.type.struct" },
  BlinkCmpKindText = { link = "@markup" },
  BlinkCmpKindTypeParameter = { link = "@lsp.type.typeParameter" },
  BlinkCmpKindVariable = { link = "@variable" },
  BlinkCmpKindValue = { link = "@string" },

  -- Snacks: Dashboard
  SnacksDashboardDesc = { fg = colors.fg0 },
  SnacksDashboardFooter = { fg = colors.fg1 },
  SnacksDashboardHeader = { fg = colors.iris_blue },
  SnacksDashboardIcon = { fg = colors.violet },
  SnacksDashboardKey = { fg = colors.sky_accent },
  SnacksDashboardSpecial = { fg = colors.sky_accent },

  -- Gitsigns
  GitSignsAdd = { fg = colors.fresh_green },
  GitSignsChange = { fg = colors.iris_blue },
  GitSignsDelete = { fg = colors.carmine_red },
}

Irises.load = function()
  if vim.version().minor < 8 then
    vim.notify_once("irises.nvim: you must use neovim 0.8 or higher")
    return
  end

  -- reset colors
  vim.cmd.hi("clear")
  if vim.g.colors_name then
    vim.cmd.hi("clear")
  end
  vim.g.colors_name = "irises"
  vim.o.termguicolors = true

  for group, settings in pairs(groups) do
    vim.api.nvim_set_hl(0, group, settings)
  end
end

Irises.reload = function()
  package.loaded["irises"] = nil
  require("irises.init").load()
end

return Irises
